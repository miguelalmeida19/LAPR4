@startuml
' ======= layout =========
skinparam backgroundColor #fcf9ea
skinparam titleBorderRoundCorner 15
skinparam titleFontSize 30
skinparam classAttributeIconSize 0
skinparam titleFontName Arial Black
skinparam titleFontColor #f8a978
skinparam roundcorner 20
skinparam stereotypeCBackgroundColor ffc5a1
skinparam class {

ArrowColor ffc5a1
BorderColor White
BackgroundColor badfdb
}


' ======= title =========
title <b>SEQUENCE DIAGRAM\n
autonumber
actor "Customer" as Cli

participant ":CheckStatusOfOrdersUI" as UI
participant ":CheckStatusOfOrdersController" as Controller
participant ":OrdersService" as Ord
participant ":TcpSrvOrders" as TCP
participant ":CustomerManagementService" as Serv
participant ":CustomerRepository" as Rep
participant ":OrderManagementService" as OrdServ



activate Cli
Cli -> UI : Requests to see the status of the open orders
activate UI
UI->Controller: getCustomerOrdersStatus()
activate Controller
Controller->Ord: sendMessageToServer(SPOMSP.Code.CUSTOMER_ORDERS.code, username)
activate Ord
Ord->TCP: run()
activate TCP
TCP->Serv: customerUser(username)
activate Serv
Serv->Rep: findByUser(systemUser)
activate Rep
deactivate Rep
deactivate Serv
TCP->OrdServ:findByCustomerStatus(customer, OrderStatus.DELIVERED)
activate OrdServ
deactivate OrdServ
TCP->Ord: sendMessage(Code.CUSTOMER_ORDERS, convert(orderList)
deactivate TCP
deactivate Ord
deactivate Controller

Cli <-- UI: Shows success or failure of the operation
deactivate UI












@enduml